$breakpoints: (
  'base': 0,
  'sm': 640px,
  'md': 768px,
  'lg': 1024px,
  'xl': 1280px,
  '2xl': 1536px
);

:root {
  // Light theme variables
  --grid-background: #ffffff;
  --grid-surface: #f5f5f7;
  --grid-border-light: rgba(0, 0, 0, 0.1);
  --grid-shadow-light: rgba(0, 0, 0, 0.05);
  --grid-debug-line: rgba(0, 122, 255, 0.2);
  --grid-debug-container: rgba(0, 122, 255, 0.1);
  --grid-debug-item: rgba(255, 59, 48, 0.1);
  --grid-text-primary: #000000;
  --grid-text-secondary: #6e6e73;
  --grid-accent: #0071e3;

  // Animation properties
  --grid-transition-duration: 0.3s;
  --grid-transition-timing: cubic-bezier(0.25, 0.1, 0.25, 1);
}

@media (prefers-color-scheme: dark) {
  :root {
    // Dark theme variables
    --grid-background: #1d1d1f;
    --grid-surface: #2c2c2e;
    --grid-border-light: rgba(255, 255, 255, 0.1);
    --grid-shadow-light: rgba(0, 0, 0, 0.2);
    --grid-debug-line: rgba(10, 132, 255, 0.3);
    --grid-debug-container: rgba(10, 132, 255, 0.15);
    --grid-debug-item: rgba(255, 69, 58, 0.15);
    --grid-text-primary: #ffffff;
    --grid-text-secondary: #86868b;
    --grid-accent: #0a84ff;
  }
}

// Mixins
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @error "Breakpoint '#{$breakpoint}' not found in $breakpoints map.";
  }
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin transition($properties...) {
  $transitions: ();
  @each $property in $properties {
    $transitions: append($transitions, $property var(--grid-transition-duration) var(--grid-transition-timing), comma);
  }
  transition: $transitions;
}

// Base styles
[data-grid-root] {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
  color: var(--grid-text-primary);
  background-color: var(--grid-background);
  @include transition(background-color, color);

  * {
    box-sizing: border-box;
  }
}

// Grid Container
[data-grid-container] {
  display: grid;
  position: relative;
  @include transition(all);

  &.with-border {
    border: 1px solid var(--grid-border-light);
    border-radius: 12px;
  }

  &.with-shadow {
    box-shadow: 0 4px 20px var(--grid-shadow-light);
  }

  // Spacing variants
  &.spacing {
    &-tight { gap: 8px; }
    &-standard { gap: 16px; }
    &-relaxed { gap: 24px; }
    &-wide { gap: 32px; }

    @include respond-to('md') {
      &-tight { gap: 12px; }
      &-standard { gap: 24px; }
      &-relaxed { gap: 32px; }
      &-wide { gap: 48px; }
    }
  }

  &.columns-1 { grid-template-columns: 1fr; }
  &.columns-2 { grid-template-columns: repeat(2, 1fr); }
  &.columns-3 { grid-template-columns: repeat(3, 1fr); }
  &.columns-4 { grid-template-columns: repeat(4, 1fr); }
  &.columns-5 { grid-template-columns: repeat(5, 1fr); }
  &.columns-6 { grid-template-columns: repeat(6, 1fr); }

  &.auto-fit {
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  }

  &.auto-fill {
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  }

  @include respond-to('sm') {
    &.sm\:columns-1 { grid-template-columns: 1fr; }
    &.sm\:columns-2 { grid-template-columns: repeat(2, 1fr); }
    &.sm\:columns-3 { grid-template-columns: repeat(3, 1fr); }
    &.sm\:columns-4 { grid-template-columns: repeat(4, 1fr); }
  }

  @include respond-to('md') {
    &.md\:columns-1 { grid-template-columns: 1fr; }
    &.md\:columns-2 { grid-template-columns: repeat(2, 1fr); }
    &.md\:columns-3 { grid-template-columns: repeat(3, 1fr); }
    &.md\:columns-4 { grid-template-columns: repeat(4, 1fr); }
    &.md\:columns-5 { grid-template-columns: repeat(5, 1fr); }
    &.md\:columns-6 { grid-template-columns: repeat(6, 1fr); }
  }

  @include respond-to('lg') {
    &.lg\:columns-1 { grid-template-columns: 1fr; }
    &.lg\:columns-2 { grid-template-columns: repeat(2, 1fr); }
    &.lg\:columns-3 { grid-template-columns: repeat(3, 1fr); }
    &.lg\:columns-4 { grid-template-columns: repeat(4, 1fr); }
    &.lg\:columns-5 { grid-template-columns: repeat(5, 1fr); }
    &.lg\:columns-6 { grid-template-columns: repeat(6, 1fr); }
  }

  @include respond-to('xl') {
    &.xl\:columns-5 { grid-template-columns: repeat(5, 1fr); }
    &.xl\:columns-6 { grid-template-columns: repeat(6, 1fr); }
  }

  &.grid-debug {
    background-color: var(--grid-debug-container);
    outline: 1px dashed var(--grid-debug-line);
  }
}

// Grid Item
[data-grid-item] {
  position: relative;
  @include transition(transform, box-shadow, opacity);

  &.with-border {
    border: 1px solid var(--grid-border-light);
    border-radius: 12px;
  }

  &.with-shadow {
    box-shadow: 0 2px 10px var(--grid-shadow-light);
  }

  &.interactive {
    cursor: pointer;

    &:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 20px var(--grid-shadow-light);
    }

    &:active {
      transform: translateY(0);
      transition-duration: 0.1s;
    }
  }

  &.content-center {
    @include flex-center;
  }

  &.content-start {
    display: flex;
    align-items: flex-start;
    justify-content: flex-start;
  }

  &.content-end {
    display: flex;
    align-items: flex-end;
    justify-content: flex-end;
  }

  // Column span utilities
  @for $i from 1 through 12 {
    &.col-span-#{$i} {
      grid-column: span #{$i};
    }
  }

  // Row span utilities
  @for $i from 1 through 12 {
    &.row-span-#{$i} {
      grid-row: span #{$i};
    }
  }

  // Responsive column spans
  @include respond-to('sm') {
    @for $i from 1 through 6 {
      &.sm\:col-span-#{$i} {
        grid-column: span #{$i};
      }
    }
  }

  @include respond-to('md') {
    @for $i from 1 through 6 {
      &.md\:col-span-#{$i} {
        grid-column: span #{$i};
      }
    }
  }

  @include respond-to('lg') {
    @for $i from 1 through 12 {
      &.lg\:col-span-#{$i} {
        grid-column: span #{$i};
      }
    }
  }

  // Padding variants
  &.p {
    &-0 { padding: 0; }
    &-1 { padding: 8px; }
    &-2 { padding: 16px; }
    &-3 { padding: 24px; }
    &-4 { padding: 32px; }
    &-5 { padding: 48px; }
  }

  &.hover-lift {
    transition: transform 0.3s var(--grid-transition-timing),
                box-shadow 0.3s var(--grid-transition-timing);

    &:hover {
      transform: translateY(-8px) scale(1.02);
      box-shadow: 0 16px 30px var(--grid-shadow-light);
    }
  }

  &.hover-scale {
    transition: transform 0.3s var(--grid-transition-timing);

    &:hover {
      transform: scale(1.05);
    }
  }

  &.grid-debug {
    background-color: var(--grid-debug-item);
    outline: 1px dotted var(--grid-debug-line);
  }
}

// Grid Area
[data-grid-area] {
  position: relative;
  @include transition(all);

  &.with-border {
    border: 1px solid var(--grid-border-light);
    border-radius: 12px;
  }

  &.with-padding {
    padding: 16px;

    @include respond-to('md') {
      padding: 24px;
    }
  }

  &[data-area="header"] { grid-area: header; }
  &[data-area="sidebar"] { grid-area: sidebar; }
  &[data-area="main"] { grid-area: main; }
  &[data-area="footer"] { grid-area: footer; }
  &[data-area="nav"] { grid-area: nav; }
  &[data-area="content"] { grid-area: content; }
}

// Grid Stack
[data-grid-stack] {
  position: relative;

  [data-grid-stack-item] {
    position: absolute;
    inset: 0;
    @include transition(opacity, transform);
  }

  &.fade-effect {
    [data-grid-stack-item]:not(:last-child) {
      opacity: 0;
    }

    &:hover [data-grid-stack-item] {
      opacity: 0.5;
    }

    &:hover [data-grid-stack-item]:hover {
      opacity: 1;
      z-index: 1;
    }
  }
}

// Debug overlay
.grid-debug-overlay {
  pointer-events: none;

  [data-grid-debug-line] {
    background-color: var(--grid-debug-line) !important;
  }
}
