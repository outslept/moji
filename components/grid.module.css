/**
* TODO: I should fix those styles..
* This should NOT be this messy & ugly
* Commented lines are those I need to fix 
*/

:root {
  /* Colors */
  --grid-guide-light: hsla(0, 0%, 92%, 0.15);
  --grid-guide-dark: hsla(0, 0%, 12%, 0.15);
  --grid-border-light: hsla(0, 0%, 92%, 1);
  --grid-border-dark: hsla(0, 0%, 12%, 1);

  /* Grid System */
  --grid-base-unit: 8px;
  --grid-gap-multiplier: 1;

  /* Breakpoints (for reference) */
  --grid-bp-xs: 0;
  --grid-bp-sm: 640px;
  --grid-bp-smd: 768px;
  --grid-bp-md: 1024px;
  --grid-bp-lg: 1280px;
  --grid-bp-xl: 1536px;
}

/* System Container */
.system {
  position: relative;
  width: 100%;
  height: var(--height, 100%);
  container-type: var(--container-type, inline-size);
  container-name: var(--container-name);
  overflow: visible;
}

/* Grid Container */
.grid {
  --current-columns: var(--grid-columns, repeat(12, 1fr));
  --current-rows: var(--grid-rows, auto);
  --current-gap: var(--gap, calc(var(--grid-base-unit) * var(--grid-gap-multiplier)));
  --current-row-gap: var(--row-gap, var(--current-gap));
  --current-column-gap: var(--column-gap, var(--current-gap));

  display: grid;
  position: relative;
  width: 100%;
  height: var(--height, auto);

  grid-template-columns: var(--grid-columns, repeat(12, 1fr));
  grid-template-rows: var(--grid-rows, auto);
  grid-auto-flow: var(--grid-auto-flow, row);
  grid-auto-rows: var(--auto-rows, auto);
  grid-auto-columns: var(--auto-columns, auto);

  gap: var(--current-gap);
  row-gap: var(--current-row-gap);
  column-gap: var(--current-column-gap);

  justify-items: var(--justify-items, start);
  align-items: var(--align-items, start);
  justify-content: var(--justify-content, start);
  align-content: var(--align-content, start);
}

/* Grid Cell */
.cell {
  --current-column: var(--grid-column, auto);
  --current-row: var(--grid-row, auto);
  --current-column-start: var(--grid-column-start, auto);
  --current-column-end: var(--grid-column-end, auto);
  --current-row-start: var(--grid-row-start, auto);
  --current-row-end: var(--grid-row-end, auto);

  min-width: 0;
  min-height: 0;
  height: var(--cell-height, auto);

  /* grid-column: var(--current-column); */
  grid-row: var(--current-row);
  /* grid-column-start: var(--current-column-start); */
  /* grid-column-end: var(--current-column-end); */
  grid-row-start: var(--current-row-start);
  grid-row-end: var(--current-row-end);

  justify-self: var(--justify-self, auto);
  align-self: var(--align-self, auto);
  order: var(--order, 0);

  transition: inherit;
}

/* Responsive Breakpoints */
@container (width >= 0) {
  .grid {
    grid-template-columns: var(--xs-grid-columns, var(--current-columns));
    gap: var(--xs-gap, var(--current-gap));
  }
  .cell {
    /* grid-column: var(--xs-grid-column, var(--current-column)); */
    grid-row: var(--xs-grid-row, var(--current-row));
  }
}

@container (width >= 640px) {
  .grid {
    grid-template-columns: var(--sm-grid-columns, var(--current-columns));
    gap: var(--sm-gap, var(--current-gap));
  }
  .cell {
    /* grid-column: var(--sm-grid-column, var(--current-column)); */
    grid-row: var(--sm-grid-row, var(--current-row));
  }
}

@container (width >= 768px) {
  .grid {
    grid-template-columns: var(--smd-grid-columns, var(--current-columns));
    gap: var(--smd-gap, var(--current-gap));
  }
  .cell {
    /* grid-column: var(--smd-grid-column, var(--current-column)); */
    grid-row: var(--smd-grid-row, var(--current-row));
  }
}

@container (width >= 1024px) {
  .grid {
    grid-template-columns: var(--md-grid-columns, var(--current-columns));
    gap: var(--md-gap, var(--current-gap));
  }
  .cell {
    /* grid-column: var(--md-grid-column, var(--current-column)); */
    grid-row: var(--md-grid-row, var(--current-row));
  }
}

@container (width >= 1280px) {
  .grid {
    grid-template-columns: var(--lg-grid-columns, var(--current-columns));
    gap: var(--lg-gap, var(--current-gap));
  }
  .cell {
    /* grid-column: var(--lg-grid-column, var(--current-column)); */
    grid-row: var(--lg-grid-row, var(--current-row));
  }
}

@container (width >= 1536px) {
  .grid {
    grid-template-columns: var(--xl-grid-columns, var(--current-columns));
    gap: var(--xl-gap, var(--current-gap));
  }
  .cell {
    /* grid-column: var(--xl-grid-column, var(--current-column)); */
    grid-row: var(--xl-grid-row, var(--current-row));
  }
}

/* Guide System */
.guidesContainer {
  position: absolute;
  inset: 0;
  pointer-events: none;
  z-index: 1;
}

.guide {
  position: absolute;
  opacity: 0;
}

.guide.active {
  opacity: 1;
}

.guide::before,
.guide::after {
  content: '';
  position: absolute;
  background: var(--grid-guide-color, var(--grid-guide-light));
}

.guide::before {
  width: var(--guide-width, 1px);
  height: 100%;
  left: 50%;
  transform: translateX(-50%);
}

.guide::after {
  width: 100%;
  height: var(--guide-width, 1px);
  top: 50%;
  transform: translateY(-50%);
}

@media (prefers-color-scheme: dark) {
  .guide::before,
  .guide::after {
    background: var(--grid-guide-color, var(--grid-guide-dark));
  }

  .grid {
    --grid-guide-color: var(--grid-guide-dark);
    --grid-border-color: var(--grid-border-dark);
  }
}

.debug {
  --debug-color: rgba(0, 255, 100, 0.05);
  --debug-border: rgba(0, 255, 100, 0.2);
}

.debug .grid {
  outline: 1px dashed var(--debug-border);
}

.debug .cell {
  outline: 1px dashed var(--debug-border);
  background: var(--debug-color);
}

.debug .guide.active {
  background: var(--debug-color);
}

.debug .guide.active::before,
.debug .guide.active::after {
  background: var(--debug-border);
}

/* Guide Visibility Controls */
.guide.hidden {
  display: none;
}

.hide-column .guide[data-type="column"],
.hide-row .guide[data-type="row"],
.hide-both .guide {
  display: none;
}

/* Utility Classes */
.solid {
  background: var(--grid-guide-color);
  box-shadow: 0 0 0 1px var(--grid-border-color);
}

/* Container Queries Support */
@supports (container-type: inline-size) {
  .system {
    container-type: inline-size;
  }
}

/* Fallbacks */
@supports not (container-type: inline-size) {
  .system {
    width: 100%;
  }

  @media (min-width: 640px) {
    .grid {
      grid-template-columns: var(--sm-grid-columns, var(--current-columns));
    }
  }

  @media (min-width: 768px) {
    .grid {
      grid-template-columns: var(--smd-grid-columns, var(--current-columns));
    }
  }

  @media (min-width: 1024px) {
    .grid {
      grid-template-columns: var(--md-grid-columns, var(--current-columns));
    }
  }

  @media (min-width: 1280px) {
    .grid {
      grid-template-columns: var(--lg-grid-columns, var(--current-columns));
    }
  }

  @media (min-width: 1536px) {
    .grid {
      grid-template-columns: var(--xl-grid-columns, var(--current-columns));
    }
  }
}

/* Print Styles */
@media print {
  .guide {
    display: none !important;
  }

  .grid {
    gap: 16px !important;
  }

  .cell {
    break-inside: avoid;
    page-break-inside: avoid;
  }
}
